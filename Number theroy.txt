///#define fast() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

/// Goldbach's conjecture : Every even integer greater than 2 can be expressed as the sum of two primes.

/// Pow function O(logn)

int power(int a,int n)
{
    string bin="";
    int temp;
    while(n>0)
    {
        temp=n%2;
        if(temp==0) bin+="0";
        else bin+="1";
        n/=2;
    }
    reverse(bin.begin(),bin.end());
 
    int res=1;
 
    for(int i=0; i<bin.size(); i++)
    {
        res=res*res;
        if(bin[i]=='1') res=a*res;
    }
    return res;
}


/// converting string to int

***vector<char>V;
 ll make()
 {
     if(!V.size()) return 0;
     ll sum=0,ckk=1;
     re_frl(k,V.size()-1,0)
     {
         if(V[k]=='-') sum*=-1;
         else
         {
         sum+=(V[k]-'0')*ckk;
         ckk*=10;
         }
     }

     V.clear();
     //cout<<sum<<endl;
     return sum;
 }


/// sorting technique

#define pll pair<ll,ll>

bool cmp( const pll &a , const pll &b)
{
    return a.second<b.second;
}

*** 3 mudt rule for this types of sort
1. cmp(a,a) = false(*most important*)
2. cmp(a,b) = true then cmp(b,a) = false
3. cmp(a,b) = true, cmp(b,c) = true then cmp(a,c) = true



/// normal prime check
bool prime (ll n) {
    ll sqr = sqrt(n);
    for (ll i=2; i<=sqr; i++) {
        if (n % i == 0) return 0;
    }
    return 1;
}

/// seive method
ll mx=10000000;

ll seive[MX], prime[MX], c;

*void seiveGen() {
    ll sqrtn = sqrt(MX);

    for(ll i = 3; i <= sqrtn; i += 2) {
            if(!seive[i>>1]) {
                    for(ll j = i * i;j < MX; j += i + i) {
                            seive[j>>1] = 1;
                    }
            }
    }

    prime[c++] = 2;
    for(ll i = 3; i < MX; i += 2) {
            if(!seive[i>>1]) prime[c++] = i;
    }
}

*bool isPrime(ll num) {
    if(num == 1) return false;

    ll sqrtn = sqrt(num);;

    for(int i = 0; prime[i] <= sqrtn; ++i) {
            if(num % prime[i] == 0) return false;
    }
    return true;
}

///gcd
ll gcd(ll a,ll b) {return b==0?a:gcd(b,a%b);}


/// bigmod
ll bigmod(ll b,ll p,ll n){
    if (p==0) return 1;
    else if(p%2==0){
        ll half1=bigmod(b,p/2,n);
        return ((half1*half1)%n);
    }
    else if(p%2==1){
        ll p1=b%n;
        ll p2=bigmod(b,p-1,n);
        return((p1*p2)%n);
    }

}

###. How many divisors
**using seive
ll divsor(ll N)
{
	ll i,val,count,sum;

	val=sqrt(N)+1;
	sum=1;
	for(i=0;prime[i]<val && i<c;i++)
	{

		if(N%prime[i]==0)
        {
            ll count=0;
		while(N%prime[i]==0)
		{
		N/=prime[i];
	        count++;
		}
		sum*=(count+1);
		}


	}
	if(N>1) sum*=2;
	return sum;
}

**normal check
ll divisor(ll n)
{
	ll lim=sqrt(n);
	ll cnt=0;
	frl(i,1,lim)
	{
	    ll p=n/i;
	    if(!(n%i) )
        {
            if(p!=i) cnt+=2;
            else cnt++;
        }
	}
	return cnt;
}
ll divsor_sum(ll N) /// use your own power function
{
	ll i,val,count,sum;

	val=sqrt(N)+1;
	sum=1;
	for(i=0;prime[i]<val && i<c;i++)
	{

		if(N%prime[i]==0)
        {
            ll count=0;
		while(N%prime[i]==0)
		{
		N/=prime[i];
	        count++;
		}
		sum*=((int) power(prime[i],count+1) -1 ) / (prime[i]-1);
		}


	}
	if(N>1) sum*= ((int) power(N,2) -1 ) / (N-1);
	return sum;
} 

// If M is prime then A^(-1) mod m=A^(m-2) mod m
