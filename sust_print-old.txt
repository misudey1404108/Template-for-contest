*** Dp :

1. Coin change problem
/// you have to make value using given coins
/// we can find if we can make that value and how many ways we can make that value
/// if it is said we can use Ci times a coin to make that value then after taking a coin we will check if it is taken == Ci times ? if yes then go to next coin else take that coin again

int coin[]={5,8,11,15,18}; //value of coins available
int make=18; //we will try to make 18
int dp[6][100];
int call(int i,int amount)
{
    if(i>=5) { //All coins have been taken
        if(amount==0)return 1;
        else return 0;
    }
    if(dp[i][amount]!=-1) return dp[i][amount]; //no need to calculate same state twice
    int ret1=0,ret2=0;
    if(amount-coin[i]>=0) ret1=call(i,amount-coin[i]); //try to take coin i
    ret2=call(i+1,amount); //dont take coin i
    //(if it said IF we can make that value then )
    return dp[i][amount]=ret1|ret2; //storing and returning.
    //(if it said HOW MANY WAYS we can make that value then )
	return dp[i][amount]=ret1+ret2
}

/// jodi kono coin[i] maximum have[i] time bebohar kora jai taile
int n,make;
int coin[100],have[100];
ll dp[51][1010];

ll call(int i,int amount)
{
    if(i>=n) { //All coins have been taken
        if(amount==0)return 1;
        else return 0;
    }
    if(dp[i][amount]!=-1) return dp[i][amount]; //no need to calculate  same state twice
    int ret=0;
    for(int take=1;take<=have[i];take++)
        {
            if(amount-coin[i]*take>=0)
                ret+=call(i+1,amount-coin[i]*take)%100000007;
                else break;
        }
        ret+=call(i+1,amount)%100000007;

    return dp[i][amount]=ret%100000007;
}


int main()
{
    memset(dp,-1,sizeof(dp));
    while(cin>>make)
    {
        cout<<call(0,make)<<endl;
    }
    return 0;
}

2.travelling salesman
ll dp[1<<18][20];
ll a[18];
int n,m,k;
map<pll,int>mm;
ll check(int mask , int at)
{

    if(__builtin_popcount(mask)==m) return 0;
    if(at>=n || mask==(1<<n)-1) return 0;
    if(dp[mask][at+1]!=-1) return dp[mask][at+1];
    ll ans=0;
    frl(i,0,n-1)
    {
        if(!(mask & (1<<i)) )
            ans=max(ans,check( mask|(1<<i) ,i)+a[i]+ mm[ mp(at+1,i)]);
    }
    dp[mask][at+1]=ans;
    return ans;
}
int main()
{
    fast();
    scanf("%d%d%d",&n,&m,&k);
    memset(dp,-1,sizeof(dp));
    frl(i,0,n-1) scanf("%I64d",&a[i]);
    frl(i,1,k)
    {
        int x,b; ll c;
        scanf("%d%d%I64d",&x,&b,&c);
        x; b--;
        mm[ mp(x,b) ]=c;
    }


    ll ans=check(0,-1);
    printf("%lld\n",ans);

}

###. Mo's algorithm
struct T{
ll a,b,block,d;
}query[sz];
bool cmp(const T &x,const T &y)
{
    if(x.block!=y.block) return x.a<y.a;
    return x.b<y.b;
}
ll n,q;
ll arr[sz];
ll ans[sz];
ll cnt[sz];
ll current_answer=0;
void add(int x)
{
    current_answer -= cnt[x] * cnt[x] * x;
    cnt[x]++;
    current_answer += cnt[x] * cnt[x] * x;


}
 void remove(int x)
{
    current_answer -= cnt[x] * cnt[x] * x;
    cnt[x]--;
    current_answer += cnt[x] * cnt[x] * x;
}
int main()
{
    fast();
     scanf("%d %d",&n,&q);
    frl(i,0,n-1)  scanf("%I64d",&arr[i]);
    ll blo=sqrt(n);
    frl(i,0,q-1)
    {
        ll x,y; scanf("%I64d %I64d",&x,&y);
        x--; y--;
        query[i].a=x; query[i].b=y;
        query[i].block=x/blo;
        query[i].d=i;
    }
    sort(query,query+q,cmp);
    ll mo_left = 0, mo_right = -1;

    frl(i,0,q-1) {
        // [left, right] is what query we must answer now.
        ll left = query[i].a;
        ll right = query[i].b;
	while(mo_right < right) {
            mo_right++; // cz age theke jog krso
            //cout<<mo_right<<' ';
            add(arr[mo_right]);
        }
        while(mo_right > right) {
            remove(arr[mo_right]);
            mo_right--; // cz age eta chilo ekon thakbe na so biyog
        }
        while(mo_left < left) {
            remove(arr[mo_left]);
            mo_left++; // cz age eta chilo ekon thakbe na so biyog
        }
        while(mo_left > left) {
            mo_left--; // cz age theke jog krso
            add(arr[mo_left]);
        }
	ans[query[i].d]=current_answer;
    }
    frl(i,0,q-1) printf("%I64d\n",ans[i]);
}

###. Binary Indexed tree

int BIT[1000], a[1000], n;
void update(int x, int delta)
{
      for(; x <= n; x += x&-x)
        BIT[x] += delta;
}
int query(int x)
{
     int sum = 0;
     for(; x > 0; x -= x&-x)
        sum += BIT[x];
     return sum;
}
/// 1 indexed array must
for(i = 1; i <= n; i++)
{
     scanf(“%d”, &a[i]);
     update(i, a[i]);
}
###.lazy without propogation
int toggle[4*n];
void make(int at, int L, int R)// call with(1,1,n)
{
  if(L == R)
  {
    toggle[at] = a[L];
    return ;
  }
  int mid = (L + R)/2;
  make(at*2, L, mid );
  make(at*2+1, mid+1, R);

  toggle[at] = toggle[at * 2] ^ toggle[at * 2 + 1];
}
void update(int at, int L, int R, int l, int r)// call with(1,1,n,2,3)
{
 
 if(r < L || R < l) return;
 if(l <= L && R <= r) {/* toggle[at] ^= 1;*/ return;}

 int mid = (L + R)/2;
 update(at * 2, L, mid, l, r);
 update(at * 2 + 1, mid + 1, R, l, r);
  toggle[at] = toggle[at * 2] ^ toggle[at * 2 + 1];

}
int query(int at, int L, int R, int l, int r)
{
 if(R < l || r < L) return 0;
 if(l <= L && R <= r) return toggle[at];

 int mid = (L + R)/2;
 return query(at * 2, L, mid, l,r) + query(at * 2 + 1, mid + 1, R,l,r);
 }
### lazy propogation

ll bit[4*n],lazy[4*n];
ll a[n+1];

void make(int at, int L, int R)
{
  if(L == R)
  {
    bit[at] = a[L];
    return ;
  }
  int mid = (L + R)/2;
  make(at*2, L, mid );
  make(at*2+1, mid+1, R);

  bit[at] = min( bit[at * 2] , bit[at * 2 + 1] );
}
void propogate(int at)
{

    lazy[at*2]+=lazy[at];
    lazy[at*2+1]+=lazy[at];
    lazy[at]=0;

}
/// call update with(1,1,n,l,r,val)
void update(int at, int L, int R, int l, int r, int val)
{

 if(r < L || R < l) return;
 if(l <= L && R <= r) {  lazy[at]+=val; return;}

 if(lazy[at]) propogate(at);

 int mid = (L + R)/2;
 update(at * 2, L, mid, l, r, val);
 update(at * 2 + 1, mid + 1, R, l, r, val);
  bit[at] = min(bit[at * 2] +lazy[at*2] , bit[at * 2 + 1] +lazy[at*2+1]);

}
/// call query with (1,1,n,l,r)
int query(int at, int L, int R, int l, int r)
{
 if(r < L || R < l) return INT_MAX;
 if(l <= L && R <= r) return bit[at]+lazy[at];

 if(lazy[at]) propogate(at);

 int mid = (L + R)/2;
 bit[at] = min(bit[at * 2] +lazy[at*2] , bit[at * 2 + 1] +lazy[at*2+1]);

 return min(
  query(at * 2, L, mid, l, r),
  query(at * 2 + 1, mid + 1, R, l, r) );
 }

 
### set:
*set<int> s;// keeps sorted data in increasing,avoids multiple value
*multiset<int>ms;// same+ keep multiple value
*ms.count(6) gives how many times 6 has in ms.
*s.insert(10); ms.insert(13);
*s.find(13)// to check is 13 has in the set
*ms.find(17)// kuje na pele end() pointer return kore
*s.erase(10); ms.erase(10);// joto gula 10 ase sob muce jabe.
ms.erase(ms.find(10))// sudu matro prothom 10 ta mucbe
//lower bound(5) returns first element equal to or greater than 5;
//upper bound(5) returns last element greater than 5;
*for(set<int>::iterator it=s.begin();it!=s.end();it++) cout<<*it;
### map
 // reverse iterator
 map<ll,ll>::reverse_iterator it;

 for(it=m.rbegin();it!=m.rend();it++)
 // erase
   m.erase(m.find(a[i]));
   m.erase(it);
 // count
   m.count(x) to check if there is any m[x]>=0

###Range Minimum Query using sparse table
/// Time Complexity(O(nlogn))
ll sparse[100005][20];
ll arr[100005];

/// making sparse table in nlogn
void make(ll n){
    //memset(sparse,-1,sizeof(sparse));
    for(ll i=0;i<n;i++) sparse[i][0]=i;
    for(ll j=1;(1<<j)<=n;j++){
        for(ll i=0;(i+(1<<j)-1)<n;i++){

            if(arr[sparse[i][j-1]] < arr[sparse[i+(1<<(j-1))][j-1]])
			/// je duita index niye kaj krbo tar moddo 				konta minimum oita check krtisi
             sparse[i][j]=sparse[i][j-1]; /// minimum valuer index 							raktisi eikhane
            else sparse[i][j]=sparse[i+(1<<(j-1))][j-1]; 
			/// minimum valuer index raktisi eikhane


    }
}}
/// returning value in O(1)
ll RmQ(ll low,ll high){
    ll l=high-low+1;
    ll k=log2(l);
    return min(arr[sparse[low][k]],arr[sparse[low+l-(1<<k)][k]]) ;
    /// je duita index niye kaj krbo tar moddo konta minimum oita 		return krtisi

}

##2. ternary search

double lo=0,hi=1e9;
fri(i,1,100)// depends on tym
{
     double x1=(2*lo+hi)/3;
     double x2=(lo+2*hi)/3;

     if(check(x1)<=check(x2)+eps)
     {
            hi=x2;
     }
     else lo=x1;
}

### DSU
int p[1000]; // initially p[i]=i;
int Find(int x)
{
    if(p[x]==x) return x;
    return p[x]=Find(p[x]);
}
void unio(int a, int b) { p[Find(b)]=Find(a);}

###.Topologicl sort

priority_queue<int, vector<int>, greater<int> >pq;

vector<ll>V[100005];
ll ans[100005];
ll degree[100005];

void topo()
{
    frl(i,1,n)
    {
        if(!degree[i]) pq.push(i);
    }
    ll ck=0;
    while(!pq.empty())
    {
        ll tmp=pq.top();
        pq.pop();
        ck++;
        ans[ck]=tmp;
        if(V[tmp].size())
        frl(i,0,V[tmp].size()-1)
        {
            ll vp=V[tmp][i];
            degree[vp]--;
            if(!degree[vp])
            {
                pq.push(vp);
            }
        }
    }
    /// print ans array which is in which oder we will do the work
    /// the work is lexicographically smallest order as we used priority queue in increasing way
    ///if(ck!=n) that maeans we cant do the work in any order
}

###.converting string to int

vector<char>V;
ll make()
{
     if(!V.size()) return 0;
     ll sum=0,ckk=1;
     re_frl(k,V.size()-1,0)
     {
         if(V[k]=='-') sum*=-1;
         else
         {
         sum+=(V[k]-'0')*ckk;
         ckk*=10;
         }
     }

     V.clear();
     //cout<<sum<<endl;
     return sum;
}
///#define fast() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

/// Goldbach's conjecture : Every even integer greater than 2 can be expressed as the sum of two primes.

###.Pow function O(logn)

int power(int a,int n)
{
    string bin="";
    int temp;
    while(n>0)
    {
        temp=n%2;
        if(temp==0) bin+="0";
        else bin+="1";
        n/=2;
    }
    reverse(bin.begin(),bin.end());
 
    int res=1;
 
    for(int i=0; i<bin.size(); i++)
    {
        res=res*res;
        if(bin[i]=='1') res=a*res;
    }
    return res;
}
###. bigmod

ll bigmod(ll b,ll p,ll n){
    if (p==0) return 1;
    else if(p%2==0){
        ll half1=bigmod(b,p/2,n);
        return ((half1*half1)%n);
    }
    else if(p%2==1){
        ll p1=b%n;
        ll p2=bigmod(b,p-1,n);
        return((p1*p2)%n);
    }

}
###. gcd

ll gcd(ll a,ll b) {return b==0?a:gcd(b,a%b);}

###.(a+b)%m=((a%m)+(b%m))%m
(a*b)%m=((a%m)*(b%m))%m

###.normal prime check

bool prime (ll n) {
    ll sqr = sqrt(n);
    for (ll i=2; i<=sqr; i++) {
        if (n % i == 0) return 0;
    }
    return 1;
}
###.seive method

ll mx=10000000;

ll seive[MX], prime[MX], c;

*void seiveGen() {
    ll sqrtn = sqrt(MX);

    for(ll i = 3; i <= sqrtn; i += 2) {
            if(!seive[i>>1]) {
                    for(ll j = i * i;j < MX; j += i + i) {
                            seive[j>>1] = 1;
                    }
            }
    }

    prime[c++] = 2;
    for(ll i = 3; i < MX; i += 2) {
            if(!seive[i>>1]) prime[c++] = i;
    }
}

*bool isPrime(ll num) {
    if(num == 1) return false;

    ll sqrtn = sqrt(num);;

    for(int i = 0; prime[i] <= sqrtn; ++i) {
            if(num % prime[i] == 0) return false;
    }
    return true;
}

###. How many divisors
**using seive
ll divsor(ll N)
{
	ll i,val,count,sum;

	val=sqrt(N)+1;
	sum=1;
	for(i=0;prime[i]<val && i<c;i++)
	{

		if(N%prime[i]==0)
        {
            ll count=0;
		while(N%prime[i]==0)
		{
		N/=prime[i];
	        count++;
		}
		sum*=(count+1);
		}


	}
	if(N>1) sum*=2;
	return sum;
}

**normal check
ll divisor(ll n)
{
	ll lim=sqrt(n);
	ll cnt=0;
	frl(i,1,lim)
	{
	    ll p=n/i;
	    if(!(n%i) )
        {
            if(p!=i) cnt+=2;
            else cnt++;
        }
	}
	return cnt;
}
ll divsor_sum(ll N) /// use your own power function
{
	ll i,val,count,sum;

	val=sqrt(N)+1;
	sum=1;
	for(i=0;prime[i]<val && i<c;i++)
	{

		if(N%prime[i]==0)
        {
            ll count=0;
		while(N%prime[i]==0)
		{
		N/=prime[i];
	        count++;
		}
		sum*=((int) power(prime[i],count+1) -1 ) / (prime[i]-1);
		}


	}
	if(N>1) sum*= ((int) power(N,2) -1 ) / (N-1);
	return sum;
} 

// If M is prime then A^(-1) mod m=A^(m-2) mod m

###.Geometry
Sum of Interior Angles = (n-2) × 180°
Each Angle (of a Regular Polygon) = (n-2) × 180° / n






